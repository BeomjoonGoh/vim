################################################################################
### Preprocessor directives
# #include <...>
snippet inc
	#include <${1:iostream}>
# #include "..."
snippet Inc
	#include "${1}.h"
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
		#define ${1:SYMBOL} ${2:value}
	#endif
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1

	${2}
	#endif /* end of include guard: $1 */
################################################################################
### Object oriented
# Namespace
snippet nsh
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} // $1
snippet ns
	namespace ${1:shortName} = ${2:fullName};
snippet usn
	using namespace ${1:std};
# Class
snippet cl
	class ${1:Name}${2}
	{
		private:
			${3}
		public:
			$1() { }
			virtual ~$1() { }
	};
# Struct
snippet st
	struct ${1} {
		${2}
	};
################################################################################
### Functions
# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}

		return 0;
	}
# function
snippet fun 
	${1:void} ${2}(${3})
	{${4}
	}
# function declaration
snippet fund
	${1:void} ${2}(${3});
snippet re
	return ${1:0};
################################################################################
### Conditions
# if
snippet if
	if (${1})
# else if 
snippet ei
	else if (${1})
# else
snippet el
	else
# Tertiary conditional
snippet t
	(${1}) ? ${2} : 
# switch
snippet sw
	switch (${1:val}) { 
		case ${2:key}:${3}
	}
snippet de
	default: 
################################################################################
### Loops
# do while
snippet do
	do {
		${2}
	} while (${1});
# while
snippet wh
	while (${1}) {
		${2}
	}
# for
snippet for
	for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:Imax}; $2${5:++})
# for back
snippet ford
	for (${1:size_t} ${2:i} = ${3:Imax}; $2-->${4:0};)
# for iterator
snippet fori
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); $1++)
# for each
snippet fore
	for (auto &${1:i} : ${2:container})
# continue & break
snippet co
	continue;
snippet br
	break;
################################################################################
### Type definition
# Typedef using
snippet us
	using ${1:customType} = ${2:int};
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
################################################################################
### Others
# Scope
snippet {
	{
		${1}
	}
# Subscript
snippet [
	[${1}]
snippet un
	unsigned 
# Const reference
snippet conr
	const ${1} &
# Template
snippet temp
	template <${1:typename} ${2:T}>
# Type casting
snippet sc
	static_cast<${1:double}>(${2})
snippet dc
	dynamic_cast<${1:double}>(${2})
snippet rc
	reinterpret_cast<${1:double}>(${2})
# cout
snippet cout
	${1:}cout << ${2} << $1endl;
# STL container
snippet map
	${1:}map<${2}, ${3}>
snippet vec
	${1:}vector<${2}> 
# Enumeration
snippet en
	enum ${1:foo} {
		${2}
	};
